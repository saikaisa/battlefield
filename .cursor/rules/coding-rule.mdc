---
description: 
globs: 
alwaysApply: true
---

# 编码规则

目前需要完成的是 military-layer 模块。

## 项目结构与约定

- 文件夹划分：
  - 代码文件在 /src 中：layers/scene‑layer、layers/military‑layer、layers/interaction‑layer、components/hud、store、models、config。
  - 资源文件统一存放在 /public/assets 中。

- 命名风格：类名采用 PascalCase，组件/脚本文件与类同名；方法、变量与常量都采用 camelCase，私有方法在前面加上"_"。

- 依赖注入：Cesium Viewer 统一通过构造器参数传入；Store 通过 openGameStore() 获取；PanelManager 通过 Vue provide/inject 提供，具体请模仿当前 App.vue 中现有的结构（顶层为各 layer 中的 Manager 和 PanelManager）。

## 编码模式

- Vue3 Composition API：组件内部仅使用 <script setup>；所有响应式状态用 ref/reactive + computed；组件之间共享 Store。

- 始终遵循“数据驱动渲染”原则——所有地图与模型状态皆来源于 Pinia Store，任何 UI/交互改变都应先更新 Store，再由 Manager/Renderer 自动同步到场景中。

- Cesium 渲染：所有地图/模型渲染集中在 Loader/Renderer。Manager 负责统一管理、生命周期与资源回收，PanelManager 和 Panel 关联，与 SceneManager 和 MilitaryManager 处于同级。

## 业务逻辑对接

命令流程：UI → 各 PanelManager 方法 → 同名 Manager 回调 → Api 接口 → 更新 Store → Loader/Renderer/其他组件同步。

LOD 与偏移：模型位置计算统一通过 MilitaryModelRenderer._calcMatrix，根据同格部队数量自动选择环形/网格/聚合布局，外部只需调整 opts 即可，必要时修改扩展。

异步与回调：所有后端调用均返回 Promise，使用 async/await。UI 操作后应清空输入、弹出提示、并在失败时展示错误。

## 风格与最佳实践

- 注释与文档：关键类/方法头部均需 JSDoc 风格注释（职责、参数、返回值）。

- 错误与日志：关键的异步操作捕获异常并 console.error。

## 扩展

- 测试覆盖：可为核心计算（如 _calcMatrix、战斗结果判定）撰写单元测试，确保逻辑正确性。

- 可配置化：将硬编码常量提取到 config/GameConfig.js 中，方便项目整体调优。

